{"version":3,"sources":["store/ducks/inputs/index.ts","views/BinaryTable/index.tsx","views/Inputs/InputCalcs.tsx","views/Inputs/InputNumbers.tsx","views/Inputs/InputGroup.tsx","views/Inputs/InputStd.tsx","views/Macros/index.tsx","components/NavBar/index.tsx","store/index.ts","App.tsx","index.tsx"],"names":["InputActionTypes","definedStrong","BinaryTable","start","count","columnsSize","Math","ceil","className","style","marginTop","BinaryItem","arrayTable","x","push","num","toString","bin","map","v","key","includes","InputCalcs","decimal","useSelector","state","inputs","m_num1","parseInt","num1","m_num2","num2","useState","order","name","render","id","label","value","binary","rows","setRows","moveGroup","source","to","sourceItem","find","i","ajust","updatedRows","forEach","sort","a","b","item","InputGroup","defaultInputState","InputActionCreators","field","type","SET","InputNumbers","dispatch","useDispatch","onChange","e","preventDefault","propName","target","split","DRAGTYPE_INPUTGROUP","Symbol","InputGroupDef","children","connectDragSource","connectDropTarget","elementRef","useRef","ref","defaultProps","InputGroupDraggable","DragSource","beginDrag","props","monitor","component","connect","dragSource","isDragging","DropTarget","hover","drop","myProps","getItem","dropTarget","isOver","canDrop","InputStd","styled","textAlign","htmlFor","fontFamily","undefined","size","length","repeat","fillBinary","Macros","width","paddingTop","NavBar","setView","href","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","composeEnhancers","composeWithDevTools","history","createBrowserHistory","store","createStore","combineReducers","form","formReducer","router","connectRouter","action","applyMiddleware","routerMiddleware","App","view","DndProvider","backend","Backend","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.05cd63af.chunk.js","sourcesContent":["// #region State\n\n/** Definição do Estado da aplicação */\nexport interface InputsState {\n    binary: {\n        num1: string;\n        num2: string;\n    };\n    decimal: {\n        num1: string;\n        num2: string;\n    };\n}\n\n/** A inicialização de dados (momento 0) */\nconst defaultInputState: InputsState = {\n    binary: {\n        num1: '0',\n        num2: '1'\n    },\n    decimal: {\n        num1: '0',\n        num2: '1'\n    }\n};\n\n// #endregion\n\n// #region Actions\n\n/** Tipos de Ações Previstas */\nexport enum InputActionTypes {\n    SET = '@inputs/set'\n}\n\n/** Payload da ActionType: SET */\ninterface InputActionSet {\n    type: typeof InputActionTypes.SET;\n    field: string;\n    binary: boolean;\n    value: string;\n}\n\nexport type InputActions = InputActionSet;\n\nexport interface InputActionCreatorsType {\n    set: (field: string, binary: boolean, value: string) => InputActionSet;\n}\n\nexport const InputActionCreators: InputActionCreatorsType = {\n    set: (field, binary, value) => ({ type: InputActionTypes.SET, field, binary, value })\n};\n\n// #endregion\n\n// #region Reducer\n\nexport const InputReducer = (state: InputsState = defaultInputState, action: InputActions) => {\n    switch (action.type) {\n        case InputActionTypes.SET:\n            return {\n                binary: {\n                    ...state.binary,\n                    [action.field]: action.binary ? action.value : parseInt(action.value, 10).toString(2)\n                },\n                decimal: {\n                    ...state.decimal,\n                    [action.field]: action.binary ? parseInt(action.value, 2).toString(10) : action.value\n                }\n            };\n        default:\n            return state;\n    }\n};\n\n// #endregion\n","import React from 'react';\nimport './index.css';\n\nconst definedStrong = [1, 2, 4, 8, 16, 32, 64, 128];\nconst strongNum = (num: number) => (definedStrong.includes(num) ? <b>{num}</b> : num.toString());\n\ninterface BinaryProps {\n    start: number;\n    count: number;\n}\n\nexport const BinaryTable: React.FC<BinaryProps> = ({ start, count }) => {\n    const columnsSize = Math.ceil(count / 5);\n    return (\n        <div className=\"row\" style={{ marginTop: '20px' }}>\n            <BinaryItem start={start} count={columnsSize} />\n            <BinaryItem start={start + columnsSize} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 2} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 3} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 4} count={columnsSize} />\n        </div>\n    );\n};\n\nexport const BinaryItem: React.FC<BinaryProps> = ({ start, count }) => {\n    const arrayTable: Array<{ num: string; bin: string; x: number }> = [];\n    for (let x = start; x < start + count; x++) {\n        arrayTable.push({\n            x,\n            num: x.toString(10),\n            bin: x.toString(2)\n        });\n    }\n\n    return (\n        <div className=\"col\">\n            <table className=\"table-striped myTable\">\n                <thead>\n                    <tr>\n                        <td>Decimal</td>\n                        <td className=\"myTd\">Binary</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {arrayTable.map(v => (\n                        <tr key={v.num}>\n                            <td className=\"myTd\">{strongNum(v.x)}</td>\n                            <td className=\"myTd\">{v.bin}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { InputGroup, InputStd } from './';\nimport { useSelector } from 'react-redux';\nimport { State } from '../../store';\n\ninterface InputCalcsProps {}\n\ninterface Row {\n    order: number;\n    name: string;\n    render: (num1: number, num2: number) => JSX.Element;\n}\n\nexport const InputCalcs: React.FC<InputCalcsProps> = () => {\n    const decimal = useSelector((state: State) => state.inputs.decimal);\n    const m_num1 = parseInt(decimal.num1, 10);\n    const m_num2 = parseInt(decimal.num2, 10);\n    const [rows, setRows] = useState<Row[]>([\n        {\n            order: 0,\n            name: 'or',\n            render: (num1, num2) => (\n                <>\n                    <InputStd id=\"ordec\" label=\"OR: Decimal\" value={(num1 | num2).toString(10)} />\n                    <InputStd id=\"orbin\" binary label=\"OR: Binary\" value={(num1 | num2).toString(2)} />\n                    <InputStd\n                        id=\"shiftorbin\"\n                        binary\n                        label=\"Num1 | (1 << Num2)\"\n                        value={(num1 | (1 << num2)).toString(2)}\n                    />\n                </>\n            )\n        },\n        {\n            order: 1,\n            name: 'and',\n            render: (num1, num2) => (\n                <>\n                    <InputStd id=\"anddec\" label=\"AND: Decimal\" value={(num1 & num2).toString(10)} />\n                    <InputStd id=\"andbin\" binary label=\"AND: Binary\" value={(num1 & num2).toString(2)} />\n                    <InputStd\n                        id=\"shiftandbin\"\n                        binary\n                        label=\"Num1 & (1 << Num2)\"\n                        value={(num1 & (1 << num2)).toString(2)}\n                    />\n                </>\n            )\n        },\n        {\n            order: 2,\n            name: 'xor',\n            render: (num1, num2) => (\n                <>\n                    <InputStd id=\"xordec\" label=\"XOR: Decimal\" value={(num1 ^ num2).toString(10)} />\n                    <InputStd id=\"xorbin\" binary label=\"XOR: Binary\" value={(num1 ^ num2).toString(2)} />\n                    <InputStd\n                        id=\"shiftxorbin\"\n                        binary\n                        label=\"Num1 ^ (1 << Num2)\"\n                        value={(num1 ^ (1 << num2)).toString(2)}\n                    />\n                </>\n            )\n        },\n        {\n            order: 3,\n            name: 'shift',\n            render: (num1, num2) => (\n                <>\n                    <InputStd id=\"shift2by1dec\" label=\"Num2 << Num1: Decimal\" value={(num2 << num1).toString(10)} />\n                    <InputStd\n                        id=\"shift2by1bin\"\n                        label=\"Num2 << Num1: Binary\"\n                        binary\n                        value={(num2 << num1).toString(2)}\n                    />\n                </>\n            )\n        }\n    ]);\n\n    const moveGroup = (source: string, to: string) => {\n        if (source === to) return;\n        const sourceItem = rows.find(i => i.name === source) as Row;\n        let ajust: number = 0;\n        let updatedRows: Row[] = [];\n        rows.forEach((i, x) => {\n            if (i.name === to) {\n                ajust += 1;\n                if (i.order > sourceItem.order) {\n                    updatedRows.push({ ...i, order: x });\n                    updatedRows.push({ ...sourceItem, order: x + ajust });\n                    return;\n                } else updatedRows.push({ ...sourceItem, order: x });\n            } else if (i.name === source) {\n                ajust -= 1;\n                return;\n            }\n            updatedRows.push({ ...i, order: x + ajust });\n        });\n        setRows(updatedRows);\n    };\n\n    return (\n        <>\n            {rows\n                .sort((a, b) => a.order - b.order)\n                .map(item => (\n                    <InputGroup key={item.name} name={item.name} moveGroup={moveGroup}>\n                        {item.render(m_num1, m_num2)}\n                    </InputGroup>\n                ))}\n        </>\n    );\n};\n","import React from 'react';\nimport { InputCalcs, InputStd } from './';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { State } from '../../store';\nimport { InputActionCreators } from '../../store/ducks';\n\nexport const InputNumbers: React.FC = () => {\n    const state = useSelector((state: State) => state.inputs);\n    const dispatch = useDispatch();\n\n    const onChange = (bin: boolean) => (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        const propName = e.target.id.split('_')[1];\n        dispatch(InputActionCreators.set(propName, bin, e.target.value));\n    };\n\n    return (\n        <form>\n            <div className=\"form-row\">\n                <InputStd\n                    id=\"dec_num1\"\n                    label=\"Decimal Number 1:\"\n                    onChange={onChange(false)}\n                    value={state.decimal.num1}\n                />\n                <InputStd\n                    id=\"bin_num1\"\n                    binary\n                    label=\"Binary Number 1:\"\n                    onChange={onChange(true)}\n                    value={state.binary.num1}\n                />\n                <InputStd\n                    id=\"shift1\"\n                    binary\n                    label=\"1 << Num1\"\n                    value={(1 << parseInt(state.decimal.num1, 10)).toString(2)}\n                />\n            </div>\n            <div className=\"form-row\">\n                <InputStd\n                    id=\"dec_num2\"\n                    label=\"Decimal Number 2:\"\n                    onChange={onChange(false)}\n                    value={state.decimal.num2}\n                />\n                <InputStd\n                    id=\"bin_num2\"\n                    binary\n                    label=\"Binary Number 2:\"\n                    onChange={onChange(true)}\n                    value={state.binary.num2}\n                />\n                <InputStd\n                    id=\"shift2\"\n                    binary\n                    label=\"1 << Num2\"\n                    value={(1 << parseInt(state.decimal.num2, 10)).toString(2)}\n                />\n            </div>\n            <InputCalcs />\n        </form>\n    );\n};\n","import React, { useRef } from 'react';\nimport { ConnectDropTarget, ConnectDragSource, DropTargetMonitor, DragSourceMonitor } from 'react-dnd';\nimport { DragSource, DropTarget, DropTargetConnector, DragSourceConnector } from 'react-dnd';\n\nexport const DRAGTYPE_INPUTGROUP = Symbol('InputGroup');\n\ninterface InputGroupDragObject {\n    name: string;\n}\n\ninterface InputGroupDragProps {\n    connectDragSource: ConnectDragSource;\n    connectDropTarget: ConnectDropTarget;\n}\n\ninterface InputGroupProps {\n    name: string;\n    moveGroup: (source: string, to: string) => void;\n}\n\nconst InputGroupDef: React.FC<InputGroupProps & InputGroupDragProps> = ({\n    name,\n    children,\n    connectDragSource,\n    connectDropTarget\n}) => {\n    const elementRef = useRef(null);\n    connectDragSource(elementRef);\n    connectDropTarget(elementRef);\n\n    return (\n        <div ref={elementRef} className=\"form-row InputGroup\">\n            {children}\n        </div>\n    );\n};\n\nInputGroupDef.defaultProps = {};\n\nconst InputGroupDraggable = DragSource(\n    DRAGTYPE_INPUTGROUP,\n    {\n        beginDrag: (props: InputGroupProps, monitor, component) => {\n            //console.log('BEGINDRAG:', props);\n            return {\n                name: props.name\n            };\n        }\n    },\n    (connect: DragSourceConnector, monitor: DragSourceMonitor) => ({\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    })\n)(InputGroupDef);\n\nexport const InputGroup = DropTarget(\n    DRAGTYPE_INPUTGROUP,\n    {\n        hover: (props, monitor, component) => {\n            //console.log('HOVER:', props, monitor, component, monitor.getItem());\n        },\n        drop: (props, monitor, component) => {\n            const myProps = props as InputGroupProps;\n            //console.log('DROP:', props, monitor, component, monitor.getItem());\n            myProps.moveGroup(monitor.getItem().name, myProps.name);\n        }\n    },\n    (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n    })\n)(InputGroupDraggable);\n","import React from 'react';\n\ninterface InputStdProps {\n    id: string;\n    label: string;\n    value: string;\n    binary?: boolean;\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const InputStd: React.FC<InputStdProps> = ({ id, label, onChange, value, binary }) => {\n    const styled: React.CSSProperties = binary ? { textAlign: 'right' } : {};\n    const fillBinary = (value: string, size: number = 8) =>\n        value.length < size ? '0'.repeat(size - value.length) + value : value;\n    return (\n        <div className=\"form-group col\">\n            <label htmlFor={id}>{label}</label>\n            <input\n                style={{ fontFamily: 'Verdana, Geneva, sans-serif', ...styled }}\n                type=\"text\"\n                className=\"form-control\"\n                id={id}\n                onChange={e => (onChange ? onChange(e) : undefined)}\n                value={binary ? fillBinary(value) : value}\n            />\n        </div>\n    );\n};\n\nInputStd.defaultProps = {\n    binary: false\n};\n","import React from 'react';\n\nexport const Macros = () => (\n    <div\n        className=\"card\"\n        style={{\n            width: '18rem;',\n            marginTop: '20px'\n        }}\n    >\n        <div className=\"card-body\">\n            <h5 className=\"card-title\">C/C++ Macros</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">Quick Guide</h6>\n            <p className=\"card-text\" style={{ paddingTop: '20px' }}>\n                <pre>\n                    <code className=\"hljs lisp\">\n                        #define bitset(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) |= (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitclear(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) <span className=\"hljs-symbol\">&amp;=</span>~ (\n                        <span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitflip(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) ^= (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitcheck(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) &amp; (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>)))\n                    </code>\n                </pre>{' '}\n            </p>\n        </div>\n    </div>\n);\n","import React from 'react';\n\ninterface NavBarProps {\n    setView: (view: string) => void;\n}\n\nexport const NavBar: React.FC<NavBarProps> = ({ setView }) => (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a href=\"#conversion\" className=\"navbar-brand\" onClick={e => setView('conversion')}>\n            Binary Lab\n        </a>\n        <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n        >\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item active\">\n                    <a className=\"nav-link\" href=\"#conversion\" onClick={e => setView('conversion')}>\n                        Conversion\n                        <span className=\"sr-only\">(current)</span>\n                    </a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#macro\" onClick={e => setView('macro')}>\n                        Macro\n                    </a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#table\" onClick={e => setView('table')}>\n                        Table\n                    </a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n);\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { createBrowserHistory, History } from 'history';\nimport { connectRouter, routerMiddleware, RouterRootState } from 'connected-react-router';\nimport { reducer as formReducer, FormReducer } from 'redux-form';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport { InputReducer, InputsState } from './ducks';\n\nconst composeEnhancers = composeWithDevTools({\n    // options like actionSanitizer, stateSanitizer\n});\n\nexport interface State {\n    readonly form: FormReducer;\n    readonly router: RouterRootState;\n    readonly inputs: InputsState;\n}\n\nexport const history: History = createBrowserHistory();\nexport const store = createStore(\n    combineReducers({\n        form: formReducer,\n        router: connectRouter(history),\n        inputs: InputReducer\n    }),\n    composeEnhancers(applyMiddleware(routerMiddleware(history)))\n);\n","import React, { useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport Backend from 'react-dnd-html5-backend';\nimport { BinaryTable } from './views/BinaryTable';\nimport { InputNumbers } from './views/Inputs';\nimport { Macros } from './views/Macros';\nimport { NavBar } from './components/NavBar';\nimport { store, history } from './store';\nimport './App.css';\n\nconst App = () => {\n    const [view, setView] = useState('conversion');\n\n    return (\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <DndProvider backend={Backend}>\n                    <div className=\"container\">\n                        <NavBar setView={setView} />\n                        {view === 'conversion' && (\n                            <div className=\"row\" style={{ marginTop: '50px' }}>\n                                <div className=\"col-2\"></div>\n                                <div className=\"col\">\n                                    <InputNumbers />\n                                </div>\n                                <div className=\"col-2\"></div>\n                            </div>\n                        )}\n                        {view === 'macro' && (\n                            <div className=\"row codeBlock\">\n                                <div className=\"col\"></div>\n                                <div className=\"col\">\n                                    <Macros />\n                                </div>\n                                <div className=\"col\"></div>\n                            </div>\n                        )}\n                        {view === 'table' && (\n                            <>\n                                <BinaryTable start={0} count={80} />\n                                <BinaryTable start={80} count={80} />\n                                <BinaryTable start={160} count={95} />\n                            </>\n                        )}\n                    </div>\n                </DndProvider>\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}