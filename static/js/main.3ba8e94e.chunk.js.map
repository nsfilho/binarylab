{"version":3,"sources":["InputNumbers.tsx","BinaryTable.tsx","App.tsx","index.tsx"],"names":["InputNumbers","useState","num1","bin1","num2","bin2","state","setState","onChangeDec","e","field","compl","preventDefault","target","value","parseInt","toString","onChangeBin","className","htmlFor","type","id","aria-describedby","onChange","style","textAlign","fontFamily","definedStrong","BinaryTable","start","count","columnsSize","Math","ceil","marginTop","BinaryItem","arrayTable","x","push","num","bin","map","v","key","includes","App","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ba8e94e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const InputNumbers: React.FC = () => {\n    const [state, setState] = useState({\n        num1: \"0\",\n        bin1: \"0\",\n        num2: \"1\",\n        bin2: \"1\"\n    });\n\n    const onChangeDec = (\n        e: React.ChangeEvent<HTMLInputElement>,\n        field: string,\n        compl: string\n    ) => {\n        e.preventDefault();\n        setState({\n            ...state,\n            [field]: e.target.value,\n            [compl]: parseInt(e.target.value, 10).toString(2)\n        });\n    };\n\n    const onChangeBin = (\n        e: React.ChangeEvent<HTMLInputElement>,\n        field: string,\n        compl: string\n    ) => {\n        e.preventDefault();\n        setState({\n            ...state,\n            [field]: e.target.value,\n            [compl]: parseInt(e.target.value, 2).toString(10)\n        });\n    };\n\n    return (\n        <form>\n            <div className=\"form-row\">\n                <div className=\"form-group col\">\n                    <label htmlFor=\"decNum1\">Decimal Number 1:</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"decNumber1\"\n                        aria-describedby=\"decNumber1Help\"\n                        onChange={e => onChangeDec(e, \"num1\", \"bin1\")}\n                        value={state.num1}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">Binary Number 1:</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"binNumber1\"\n                        onChange={e => onChangeBin(e, \"bin1\", \"num1\")}\n                        value={state.bin1}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">1 &lt;&lt; Num1</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(1 << parseInt(state.num1, 10)).toString(2)}\n                    />\n                </div>\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group col\">\n                    <label htmlFor=\"decNum1\">Decimal Number 2:</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"decNumber2\"\n                        aria-describedby=\"decNumber1Help\"\n                        onChange={e => onChangeDec(e, \"num2\", \"bin2\")}\n                        value={state.num2}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">Binary Number 2:</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"binNumber2\"\n                        onChange={e => onChangeBin(e, \"bin2\", \"num2\")}\n                        value={state.bin2}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">1 &lt;&lt; Num2</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(1 << parseInt(state.num2, 10)).toString(2)}\n                    />\n                </div>\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">OR: Decimal</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) | parseInt(state.num2, 10)\n                        ).toString(10)}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">OR: Binary</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) | parseInt(state.num2, 10)\n                        ).toString(2)}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">\n                        Num1 | &#40;1&lt;&lt;Num2&#41;\n                    </label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) |\n                            (1 << parseInt(state.num2, 10))\n                        ).toString(2)}\n                    />\n                </div>\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">AND: Decimal</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) & parseInt(state.num2, 10)\n                        ).toString(10)}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">AND: Binary</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) & parseInt(state.num2, 10)\n                        ).toString(2)}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">\n                        <b>Num1 & &#40;1&lt;&lt;Num2&#41; </b>\n                    </label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) &\n                            (1 << parseInt(state.num2, 10))\n                        ).toString(2)}\n                    />\n                </div>\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">XOR: Decimal</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) ^ parseInt(state.num2, 10)\n                        ).toString(10)}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">XOR: Binary</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) ^ parseInt(state.num2, 10)\n                        ).toString(2)}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">\n                        <b>Num1 ^ &#40;1&lt;&lt;Num2&#41;</b>\n                    </label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num1, 10) ^\n                            (1 << parseInt(state.num2, 10))\n                        ).toString(2)}\n                    />\n                </div>\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">Num2 &lt;&lt; Num1: Dec</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num2, 10) << parseInt(state.num1, 10)\n                        ).toString(10)}\n                    />\n                </div>\n                <div className=\"form-group col\">\n                    <label htmlFor=\"binNumber1\">Num2 &lt;&lt; Num1: Bin</label>\n                    <input\n                        style={{\n                            textAlign: \"right\",\n                            fontFamily: \"Verdana, Geneva, sans-serif\"\n                        }}\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"or\"\n                        value={(\n                            parseInt(state.num2, 10) << parseInt(state.num1, 10)\n                        ).toString(2)}\n                    />\n                </div>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n                Submit\n            </button>\n        </form>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport \"./BinaryTable.css\";\n\nconst definedStrong = [1, 2, 4, 8, 16, 32, 64, 128];\nconst strongNum = (num: number) =>\n    definedStrong.includes(num) ? <b>{num}</b> : num.toString();\n\ninterface BinaryProps {\n    start: number;\n    count: number;\n}\n\nexport const BinaryTable: React.FC<BinaryProps> = ({ start, count }) => {\n    const columnsSize = Math.ceil(count / 5);\n    return (\n        <div className=\"row\" style={{ marginTop: \"20px\" }}>\n            <BinaryItem start={start} count={columnsSize} />\n            <BinaryItem start={start + columnsSize} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 2} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 3} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 4} count={columnsSize} />\n        </div>\n    );\n};\n\nexport const BinaryItem: React.FC<BinaryProps> = ({ start, count }) => {\n    const arrayTable: Array<{ num: string; bin: string; x: number }> = [];\n    for (let x = start; x < start + count; x++) {\n        arrayTable.push({\n            x,\n            num: x.toString(10),\n            bin: x.toString(2)\n        });\n    }\n\n    return (\n        <div className=\"col\">\n            <table className=\"table-striped myTable\">\n                <thead>\n                    <tr>\n                        <td>Decimal</td>\n                        <td className=\"myTd\">Binary</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {arrayTable.map(v => (\n                        <tr key={v.num}>\n                            <td className=\"myTd\">{strongNum(v.x)}</td>\n                            <td className=\"myTd\">{v.bin}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { InputNumbers } from \"./InputNumbers\";\nimport { BinaryTable } from \"./BinaryTable\";\n\nconst App = () => {\n    return (\n        <div className=\"container\">\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a className=\"navbar-brand\" href=\"#\">\n                    Binary Lab\n                </a>\n                <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarSupportedContent\"\n                    aria-controls=\"navbarSupportedContent\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                >\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div\n                    className=\"collapse navbar-collapse\"\n                    id=\"navbarSupportedContent\"\n                >\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"#\">\n                                Conversion\n                                <span className=\"sr-only\">(current)</span>\n                            </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">\n                                Table\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <div className=\"row\" style={{ marginTop: \"50px\" }}>\n                <div className=\"col-2\"></div>\n                <div className=\"col\">\n                    <InputNumbers />\n                </div>\n                <div className=\"col-2\"></div>\n            </div>\n            <BinaryTable start={0} count={80} />\n            <BinaryTable start={80} count={80} />\n            <BinaryTable start={160} count={95} />\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}