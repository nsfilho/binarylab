{"version":3,"sources":["InputGroup.tsx","InputCalcs.tsx","InputNumbers.tsx","BinaryTable.tsx","Macros.tsx","NavBar.tsx","App.tsx","index.tsx"],"names":["DRAGTYPE_INPUTGROUP","Symbol","InputGroupDef","name","children","connectDragSource","connectDropTarget","elementRef","useRef","ref","className","defaultProps","InputGroupDraggable","DragSource","beginDrag","props","monitor","component","connect","dragSource","isDragging","InputGroup","DropTarget","hover","drop","myProps","moveGroup","getItem","dropTarget","isOver","canDrop","InputCalcs","num1","num2","useState","order","render","id","label","value","toString","binary","rows","setRows","source","to","sourceItem","find","i","ajust","updatedRows","forEach","x","push","sort","a","b","map","item","key","InputStd","onChange","styled","textAlign","htmlFor","style","fontFamily","type","e","undefined","size","length","repeat","fillBinary","InputNumbers","stateDec","setStateDec","stateBin","setStateBin","bin","propName","target","split","preventDefault","parseInt","definedStrong","BinaryTable","start","count","columnsSize","Math","ceil","marginTop","BinaryItem","arrayTable","num","v","includes","Macros","width","paddingTop","NavBar","setView","href","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","view","DndProvider","backend","Backend","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.22f4ea0d.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { ConnectDropTarget, ConnectDragSource, DropTargetMonitor, DragSourceMonitor } from 'react-dnd';\nimport { DragSource, DropTarget, DropTargetConnector, DragSourceConnector } from 'react-dnd';\n\nexport const DRAGTYPE_INPUTGROUP = Symbol('InputGroup');\n\ninterface InputGroupDragObject {\n    name: string;\n}\n\ninterface InputGroupDragProps {\n    connectDragSource: ConnectDragSource;\n    connectDropTarget: ConnectDropTarget;\n}\n\ninterface InputGroupProps {\n    name: string;\n    moveGroup: (source: string, to: string) => void;\n}\n\nconst InputGroupDef: React.FC<InputGroupProps & InputGroupDragProps> = ({\n    name,\n    children,\n    connectDragSource,\n    connectDropTarget\n}) => {\n    const elementRef = useRef(null);\n    connectDragSource(elementRef);\n    connectDropTarget(elementRef);\n\n    return (\n        <div ref={elementRef} className=\"form-row InputGroup\">\n            {children}\n        </div>\n    );\n};\n\nInputGroupDef.defaultProps = {};\n\nconst InputGroupDraggable = DragSource(\n    DRAGTYPE_INPUTGROUP,\n    {\n        beginDrag: (props: InputGroupProps, monitor, component) => {\n            //console.log('BEGINDRAG:', props);\n            return {\n                name: props.name\n            };\n        }\n    },\n    (connect: DragSourceConnector, monitor: DragSourceMonitor) => ({\n        connectDragSource: connect.dragSource(),\n        isDragging: monitor.isDragging()\n    })\n)(InputGroupDef);\n\nexport const InputGroup = DropTarget(\n    DRAGTYPE_INPUTGROUP,\n    {\n        hover: (props, monitor, component) => {\n            //console.log('HOVER:', props, monitor, component, monitor.getItem());\n        },\n        drop: (props, monitor, component) => {\n            const myProps = props as InputGroupProps;\n            //console.log('DROP:', props, monitor, component, monitor.getItem());\n            myProps.moveGroup(monitor.getItem().name, myProps.name);\n        }\n    },\n    (connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop()\n    })\n)(InputGroupDraggable);\n","import React, { useState } from 'react';\nimport { InputGroup } from './InputGroup';\nimport { InputStd } from './InputNumbers';\n\ninterface InputCalcsProps {\n    num1: number;\n    num2: number;\n}\n\ninterface Row {\n    order: number;\n    name: string;\n    render: JSX.Element;\n}\n\nexport const InputCalcs: React.FC<InputCalcsProps> = ({ num1, num2 }) => {\n    const [rows, setRows] = useState<Row[]>([\n        {\n            order: 0,\n            name: 'or',\n            render: (\n                <>\n                    <InputStd id=\"ordec\" label=\"OR: Decimal\" value={(num1 | num2).toString(10)} />\n                    <InputStd id=\"orbin\" binary label=\"OR: Binary\" value={(num1 | num2).toString(2)} />\n                    <InputStd\n                        id=\"shiftorbin\"\n                        binary\n                        label=\"Num1 | (1 << Num2)\"\n                        value={(num1 | (1 << num2)).toString(2)}\n                    />\n                </>\n            )\n        },\n        {\n            order: 1,\n            name: 'and',\n            render: (\n                <>\n                    <InputStd id=\"anddec\" label=\"AND: Decimal\" value={(num1 & num2).toString(10)} />\n                    <InputStd id=\"andbin\" binary label=\"AND: Binary\" value={(num1 & num2).toString(2)} />\n                    <InputStd\n                        id=\"shiftandbin\"\n                        binary\n                        label=\"Num1 & (1 << Num2)\"\n                        value={(num1 & (1 << num2)).toString(2)}\n                    />\n                </>\n            )\n        },\n        {\n            order: 2,\n            name: 'xor',\n            render: (\n                <>\n                    <InputStd id=\"xordec\" label=\"XOR: Decimal\" value={(num1 ^ num2).toString(10)} />\n                    <InputStd id=\"xorbin\" binary label=\"XOR: Binary\" value={(num1 ^ num2).toString(2)} />\n                    <InputStd\n                        id=\"shiftxorbin\"\n                        binary\n                        label=\"Num1 ^ (1 << Num2)\"\n                        value={(num1 ^ (1 << num2)).toString(2)}\n                    />\n                </>\n            )\n        },\n        {\n            order: 3,\n            name: 'shift',\n            render: (\n                <>\n                    <InputStd id=\"shift2by1dec\" label=\"Num2 << Num1: Decimal\" value={(num2 << num1).toString(10)} />\n                    <InputStd\n                        id=\"shift2by1bin\"\n                        label=\"Num2 << Num1: Binary\"\n                        binary\n                        value={(num2 << num1).toString(2)}\n                    />\n                </>\n            )\n        }\n    ]);\n\n    const moveGroup = (source: string, to: string) => {\n        if (source === to) return;\n        const sourceItem = rows.find(i => i.name === source) as Row;\n        let ajust: number = 0;\n        let updatedRows: Row[] = [];\n        rows.forEach((i, x) => {\n            if (i.name === to) {\n                ajust += 1;\n                if (i.order > sourceItem.order) {\n                    updatedRows.push({ ...i, order: x });\n                    updatedRows.push({ ...sourceItem, order: x + ajust });\n                    return;\n                } else updatedRows.push({ ...sourceItem, order: x });\n            } else if (i.name === source) {\n                ajust -= 1;\n                return;\n            }\n            updatedRows.push({ ...i, order: x + ajust });\n        });\n        setRows(updatedRows);\n    };\n\n    return (\n        <>\n            {rows\n                .sort((a, b) => a.order - b.order)\n                .map(item => (\n                    <InputGroup key={item.name} name={item.name} moveGroup={moveGroup}>\n                        {item.render}\n                    </InputGroup>\n                ))}\n        </>\n    );\n};\n","import React, { useState } from 'react';\nimport { InputCalcs } from './InputCalcs';\n\ninterface InputStdProps {\n    id: string;\n    label: string;\n    value: string;\n    binary?: boolean;\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const InputStd: React.FC<InputStdProps> = ({ id, label, onChange, value, binary }) => {\n    const styled: React.CSSProperties = binary ? { textAlign: 'right' } : {};\n    const fillBinary = (value: string, size: number = 8) =>\n        value.length < size ? '0'.repeat(size - value.length) + value : value;\n\n    return (\n        <div className=\"form-group col\">\n            <label htmlFor={id}>{label}</label>\n            <input\n                style={{ fontFamily: 'Verdana, Geneva, sans-serif', ...styled }}\n                type=\"text\"\n                className=\"form-control\"\n                id={id}\n                onChange={e => (onChange ? onChange(e) : undefined)}\n                value={binary ? fillBinary(value) : value}\n            />\n        </div>\n    );\n};\n\nInputStd.defaultProps = {\n    binary: false\n};\n\nexport const InputNumbers: React.FC = () => {\n    const [stateDec, setStateDec] = useState({ num1: '0', num2: '1' });\n    const [stateBin, setStateBin] = useState({ num1: '0', num2: '1' });\n\n    const onChange = (bin: boolean) => (e: React.ChangeEvent<HTMLInputElement>) => {\n        const propName = e.target.id.split('_')[1];\n        e.preventDefault();\n        setStateDec({\n            ...stateDec,\n            [propName]: bin ? parseInt(e.target.value, 2).toString(10) : e.target.value\n        });\n        setStateBin({\n            ...stateBin,\n            [propName]: bin ? e.target.value : parseInt(e.target.value, 10).toString(2)\n        });\n    };\n\n    return (\n        <form>\n            <div className=\"form-row\">\n                <InputStd id=\"dec_num1\" label=\"Decimal Number 1:\" onChange={onChange(false)} value={stateDec.num1} />\n                <InputStd\n                    id=\"bin_num1\"\n                    binary\n                    label=\"Binary Number 1:\"\n                    onChange={onChange(true)}\n                    value={stateBin.num1}\n                />\n                <InputStd id=\"shift1\" binary label=\"1 << Num1\" value={(1 << parseInt(stateDec.num1, 10)).toString(2)} />\n            </div>\n            <div className=\"form-row\">\n                <InputStd id=\"dec_num2\" label=\"Decimal Number 2:\" onChange={onChange(false)} value={stateDec.num2} />\n                <InputStd\n                    id=\"bin_num2\"\n                    binary\n                    label=\"Binary Number 2:\"\n                    onChange={onChange(true)}\n                    value={stateBin.num2}\n                />\n                <InputStd id=\"shift2\" binary label=\"1 << Num2\" value={(1 << parseInt(stateDec.num2, 10)).toString(2)} />\n            </div>\n            <InputCalcs num1={parseInt(stateDec.num1, 10)} num2={parseInt(stateDec.num2, 10)} />\n        </form>\n    );\n};\n","import React from 'react';\nimport './BinaryTable.css';\n\nconst definedStrong = [1, 2, 4, 8, 16, 32, 64, 128];\nconst strongNum = (num: number) => (definedStrong.includes(num) ? <b>{num}</b> : num.toString());\n\ninterface BinaryProps {\n    start: number;\n    count: number;\n}\n\nexport const BinaryTable: React.FC<BinaryProps> = ({ start, count }) => {\n    const columnsSize = Math.ceil(count / 5);\n    return (\n        <div className=\"row\" style={{ marginTop: '20px' }}>\n            <BinaryItem start={start} count={columnsSize} />\n            <BinaryItem start={start + columnsSize} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 2} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 3} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 4} count={columnsSize} />\n        </div>\n    );\n};\n\nexport const BinaryItem: React.FC<BinaryProps> = ({ start, count }) => {\n    const arrayTable: Array<{ num: string; bin: string; x: number }> = [];\n    for (let x = start; x < start + count; x++) {\n        arrayTable.push({\n            x,\n            num: x.toString(10),\n            bin: x.toString(2)\n        });\n    }\n\n    return (\n        <div className=\"col\">\n            <table className=\"table-striped myTable\">\n                <thead>\n                    <tr>\n                        <td>Decimal</td>\n                        <td className=\"myTd\">Binary</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {arrayTable.map(v => (\n                        <tr key={v.num}>\n                            <td className=\"myTd\">{strongNum(v.x)}</td>\n                            <td className=\"myTd\">{v.bin}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const Macros = () => (\n    <div\n        className=\"card\"\n        style={{\n            width: '18rem;',\n            marginTop: '20px'\n        }}\n    >\n        <div className=\"card-body\">\n            <h5 className=\"card-title\">C/C++ Macros</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">Quick Guide</h6>\n            <p className=\"card-text\" style={{ paddingTop: '20px' }}>\n                <pre>\n                    <code className=\"hljs lisp\">\n                        #define bitset(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) |= (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitclear(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) <span className=\"hljs-symbol\">&amp;=</span>~ (\n                        <span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitflip(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) ^= (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitcheck(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) &amp; (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>)))\n                    </code>\n                </pre>{' '}\n            </p>\n        </div>\n    </div>\n);\n","import React from 'react';\n\ninterface NavBarProps {\n    setView: (view: string) => void;\n}\n\nexport const NavBar: React.FC<NavBarProps> = ({ setView }) => (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a href=\"#conversion\" className=\"navbar-brand\" onClick={e => setView('conversion')}>\n            Binary Lab\n        </a>\n        <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n        >\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item active\">\n                    <a className=\"nav-link\" href=\"#conversion\" onClick={e => setView('conversion')}>\n                        Conversion\n                        <span className=\"sr-only\">(current)</span>\n                    </a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#macro\" onClick={e => setView('macro')}>\n                        Macro\n                    </a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#table\" onClick={e => setView('table')}>\n                        Table\n                    </a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n);\n","import React, { useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport { InputNumbers } from './InputNumbers';\nimport { BinaryTable } from './BinaryTable';\nimport { Macros } from './Macros';\nimport { NavBar } from './NavBar';\nimport './App.css';\n\nconst App = () => {\n    const [view, setView] = useState('conversion');\n\n    return (\n        <DndProvider backend={Backend}>\n            <div className=\"container\">\n                <NavBar setView={setView} />\n                {view === 'conversion' && (\n                    <div className=\"row\" style={{ marginTop: '50px' }}>\n                        <div className=\"col-2\"></div>\n                        <div className=\"col\">\n                            <InputNumbers />\n                        </div>\n                        <div className=\"col-2\"></div>\n                    </div>\n                )}\n                {view === 'macro' && (\n                    <div className=\"row codeBlock\">\n                        <div className=\"col\"></div>\n                        <div className=\"col\">\n                            <Macros />\n                        </div>\n                        <div className=\"col\"></div>\n                    </div>\n                )}\n                {view === 'table' && (\n                    <>\n                        <BinaryTable start={0} count={80} />\n                        <BinaryTable start={80} count={80} />\n                        <BinaryTable start={160} count={95} />\n                    </>\n                )}\n            </div>\n        </DndProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}