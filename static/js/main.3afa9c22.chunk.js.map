{"version":3,"sources":["InputNumbers.tsx","BinaryTable.tsx","Macros.tsx","NavBar.tsx","App.tsx","index.tsx"],"names":["InputStd","id","label","onChange","value","styled","binary","textAlign","fontFamily","className","htmlFor","style","type","e","undefined","defaultProps","InputNumbers","useState","num1","num2","stateDec","setStateDec","stateBin","setStateBin","bin","field","preventDefault","target","parseInt","toString","definedStrong","BinaryTable","start","count","columnsSize","Math","ceil","marginTop","BinaryItem","arrayTable","x","push","num","map","v","key","includes","Macros","width","paddingTop","NavBar","setView","href","onClick","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","view","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3afa9c22.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ninterface InputStdProps {\n    id: string;\n    label: string;\n    value: string | number;\n    binary?: boolean;\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>, field: string) => void;\n}\n\nexport const InputStd: React.FC<InputStdProps> = ({ id, label, onChange, value, binary }) => {\n    const styled: React.CSSProperties = binary\n        ? {\n              textAlign: 'right',\n              fontFamily: 'Verdana, Geneva, sans-serif'\n          }\n        : {};\n    return (\n        <div className=\"form-group col\">\n            <label htmlFor={id}>{label}</label>\n            <input\n                style={styled}\n                type=\"text\"\n                className=\"form-control\"\n                id={id}\n                onChange={e => (onChange ? onChange(e, id) : undefined)}\n                value={value}\n            />\n        </div>\n    );\n};\n\nInputStd.defaultProps = {\n    binary: false\n};\n\nexport const InputNumbers: React.FC = () => {\n    const [stateDec, setStateDec] = useState({\n        num1: '0',\n        num2: '1'\n    });\n\n    const [stateBin, setStateBin] = useState({\n        num1: '0',\n        num2: '1'\n    });\n\n    const onChange = (bin: boolean) => (e: React.ChangeEvent<HTMLInputElement>, field: string) => {\n        e.preventDefault();\n        setStateDec({\n            ...stateDec,\n            [e.target.id]: bin ? parseInt(e.target.value, 2).toString(10) : e.target.value\n        });\n        setStateBin({\n            ...stateBin,\n            [e.target.id]: bin ? e.target.value : parseInt(e.target.value, 10).toString(2)\n        });\n    };\n\n    return (\n        <form>\n            <div className=\"form-row\">\n                <InputStd id=\"num1\" label=\"Decimal Number 1:\" onChange={onChange(false)} value={stateDec.num1} />\n                <InputStd id=\"num1\" binary label=\"Binary Number 1:\" onChange={onChange(true)} value={stateBin.num1} />\n                <InputStd id=\"shift1\" binary label=\"1 << Num1\" value={(1 << parseInt(stateDec.num1, 10)).toString(2)} />\n            </div>\n            <div className=\"form-row\">\n                <InputStd id=\"num2\" label=\"Decimal Number 2:\" onChange={onChange(false)} value={stateDec.num2} />\n                <InputStd id=\"num2\" binary label=\"Binary Number 2:\" onChange={onChange(true)} value={stateBin.num2} />\n                <InputStd id=\"shift2\" binary label=\"1 << Num2\" value={(1 << parseInt(stateDec.num2, 10)).toString(2)} />\n            </div>\n            <div className=\"form-row\">\n                <InputStd\n                    id=\"ordec\"\n                    label=\"OR: Decimal\"\n                    value={(parseInt(stateDec.num1, 10) | parseInt(stateDec.num2, 10)).toString(10)}\n                />\n                <InputStd\n                    id=\"orbin\"\n                    binary\n                    label=\"OR: Binary\"\n                    value={(parseInt(stateDec.num1, 10) | parseInt(stateDec.num2, 10)).toString(2)}\n                />\n                <InputStd\n                    id=\"shiftorbin\"\n                    binary\n                    label=\"Num1 | (1 << Num2)\"\n                    value={(parseInt(stateDec.num1, 10) | (1 << parseInt(stateDec.num2, 10))).toString(2)}\n                />\n            </div>\n            <div className=\"form-row\">\n                <InputStd\n                    id=\"anddec\"\n                    label=\"AND: Decimal\"\n                    value={(parseInt(stateDec.num1, 10) & parseInt(stateDec.num2, 10)).toString(10)}\n                />\n                <InputStd\n                    id=\"andbin\"\n                    binary\n                    label=\"AND: Binary\"\n                    value={(parseInt(stateDec.num1, 10) & parseInt(stateDec.num2, 10)).toString(2)}\n                />\n                <InputStd\n                    id=\"shiftandbin\"\n                    binary\n                    label=\"Num1 & (1 << Num2)\"\n                    value={(parseInt(stateDec.num1, 10) & (1 << parseInt(stateDec.num2, 10))).toString(2)}\n                />\n            </div>\n            <div className=\"form-row\">\n                <InputStd\n                    id=\"xordec\"\n                    label=\"XOR: Decimal\"\n                    value={(parseInt(stateDec.num1, 10) ^ parseInt(stateDec.num2, 10)).toString(10)}\n                />\n                <InputStd\n                    id=\"xorbin\"\n                    binary\n                    label=\"XOR: Binary\"\n                    value={(parseInt(stateDec.num1, 10) ^ parseInt(stateDec.num2, 10)).toString(2)}\n                />\n                <InputStd\n                    id=\"shiftxorbin\"\n                    binary\n                    label=\"Num1 ^ (1 << Num2)\"\n                    value={(parseInt(stateDec.num1, 10) ^ (1 << parseInt(stateDec.num2, 10))).toString(2)}\n                />\n            </div>\n            <div className=\"form-row\">\n                <InputStd\n                    id=\"shift2by1dec\"\n                    label=\"Num2 << Num1: Decimal\"\n                    value={(parseInt(stateDec.num2, 10) << parseInt(stateDec.num1, 10)).toString(10)}\n                />\n                <InputStd\n                    id=\"shift2by1bin\"\n                    label=\"Num2 << Num1: Binary\"\n                    binary\n                    value={(parseInt(stateDec.num2, 10) << parseInt(stateDec.num1, 10)).toString(2)}\n                />\n            </div>\n        </form>\n    );\n};\n","import React from 'react';\nimport './BinaryTable.css';\n\nconst definedStrong = [1, 2, 4, 8, 16, 32, 64, 128];\nconst strongNum = (num: number) => (definedStrong.includes(num) ? <b>{num}</b> : num.toString());\n\ninterface BinaryProps {\n    start: number;\n    count: number;\n}\n\nexport const BinaryTable: React.FC<BinaryProps> = ({ start, count }) => {\n    const columnsSize = Math.ceil(count / 5);\n    return (\n        <div className=\"row\" style={{ marginTop: '20px' }}>\n            <BinaryItem start={start} count={columnsSize} />\n            <BinaryItem start={start + columnsSize} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 2} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 3} count={columnsSize} />\n            <BinaryItem start={start + columnsSize * 4} count={columnsSize} />\n        </div>\n    );\n};\n\nexport const BinaryItem: React.FC<BinaryProps> = ({ start, count }) => {\n    const arrayTable: Array<{ num: string; bin: string; x: number }> = [];\n    for (let x = start; x < start + count; x++) {\n        arrayTable.push({\n            x,\n            num: x.toString(10),\n            bin: x.toString(2)\n        });\n    }\n\n    return (\n        <div className=\"col\">\n            <table className=\"table-striped myTable\">\n                <thead>\n                    <tr>\n                        <td>Decimal</td>\n                        <td className=\"myTd\">Binary</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {arrayTable.map(v => (\n                        <tr key={v.num}>\n                            <td className=\"myTd\">{strongNum(v.x)}</td>\n                            <td className=\"myTd\">{v.bin}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n","import React from 'react';\n\nexport const Macros = () => (\n    <div\n        className=\"card\"\n        style={{\n            width: '18rem;',\n            marginTop: '20px'\n        }}\n    >\n        <div className=\"card-body\">\n            <h5 className=\"card-title\">C/C++ Macros</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">Quick Guide</h6>\n            <p className=\"card-text\" style={{ paddingTop: '20px' }}>\n                <pre>\n                    <code className=\"hljs lisp\">\n                        #define bitset(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) |= (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitclear(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) <span className=\"hljs-symbol\">&amp;=</span>~ (\n                        <span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitflip(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) ^= (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>))) <br />\n                        #define bitcheck(\n                        <span className=\"hljs-name\">byte</span>\n                        ,nbit) ((\n                        <span className=\"hljs-name\">byte</span>) &amp; (<span className=\"hljs-number\">1</span>\n                        &lt;&lt;(\n                        <span className=\"hljs-name\">nbit</span>)))\n                    </code>\n                </pre>{' '}\n            </p>\n        </div>\n    </div>\n);\n","import React from 'react';\n\ninterface NavBarProps {\n    setView: (view: string) => void;\n}\n\nexport const NavBar: React.FC<NavBarProps> = ({ setView }) => (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a href=\"#conversion\" className=\"navbar-brand\" onClick={e => setView('conversion')}>\n            Binary Lab\n        </a>\n        <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n        >\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item active\">\n                    <a className=\"nav-link\" href=\"#conversion\" onClick={e => setView('conversion')}>\n                        Conversion\n                        <span className=\"sr-only\">(current)</span>\n                    </a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#macro\" onClick={e => setView('macro')}>\n                        Macro\n                    </a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#table\" onClick={e => setView('table')}>\n                        Table\n                    </a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n);\n","import React, { useState } from 'react';\nimport './App.css';\nimport { InputNumbers } from './InputNumbers';\nimport { BinaryTable } from './BinaryTable';\nimport { Macros } from './Macros';\nimport { NavBar } from './NavBar';\n\nconst App = () => {\n    const [view, setView] = useState('conversion');\n\n    return (\n        <div className=\"container\">\n            <NavBar setView={setView} />\n            {view === 'conversion' && (\n                <div className=\"row\" style={{ marginTop: '50px' }}>\n                    <div className=\"col-2\"></div>\n                    <div className=\"col\">\n                        <InputNumbers />\n                    </div>\n                    <div className=\"col-2\"></div>\n                </div>\n            )}\n            {view === 'macro' && (\n                <div className=\"row codeBlock\">\n                    <div className=\"col\"></div>\n                    <div className=\"col\">\n                        <Macros />\n                    </div>\n                    <div className=\"col\"></div>\n                </div>\n            )}\n            {view === 'table' && (\n                <>\n                    <BinaryTable start={0} count={80} />\n                    <BinaryTable start={80} count={80} />\n                    <BinaryTable start={160} count={95} />\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}